{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","fetchTasks","console","log","fetch","then","response","json","data","setState","todoList","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","handleChange","e","target","value","activeItem","state","title","handleSubmit","preventDefault","csrftoken","url","editing","id","method","headers","body","JSON","stringify","completed","catch","error","startEdit","task","deleteItem","strikeUnstike","this","tasks","self","onSubmit","className","style","flex","onChange","type","placeholder","aria-describedby","map","index","key","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d3252b60.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoList: [],\n      activeItem: {\n        id: null,\n        title: \"\",\n        completed: false,\n      },\n      editing: false,\n    };\n  }\n\n  componentWillMount() {\n    this.fetchTasks();\n  }\n\n  fetchTasks = () => {\n    console.log(\"Fetching...\");\n\n    fetch(\"http://127.0.0.1:8000/api/task-list/\")\n      .then((response) => response.json())\n      .then((data) =>\n        this.setState({\n          todoList: data,\n        })\n      );\n  };\n\n  getCookie = (name) => {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== \"\") {\n      const cookies = document.cookie.split(\";\");\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        // Does this cookie string begin with the name we want?\n        if (cookie.substring(0, name.length + 1) === name + \"=\") {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  };\n\n  handleChange = (e) => {\n    var name = e.target.name;\n    var value = e.target.value;\n    console.log(\"Name:\", name);\n    console.log(\"value:\", value);\n\n    this.setState({\n      activeItem: {\n        ...this.state.activeItem,\n        title: value,\n      },\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"ITEM:\", this.state.activeItem);\n\n    var csrftoken = this.getCookie(\"csrftoken\");\n    var url = \"http://127.0.0.1:8000/api/task-create/\";\n\n    if (this.state.editing == true) {\n      url = `http://127.0.0.1:8000/api/task-update/ ${this.state.activeItem.id}/`;\n      this.setState({\n        editing: false,\n      });\n    }\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken,\n      },\n      body: JSON.stringify(this.state.activeItem),\n    })\n      .then((response) => {\n        this.fetchTasks();\n        this.setState({\n          activeItem: {\n            id: null,\n            title: \"\",\n            completed: false,\n          },\n        });\n      })\n      .catch((error) => {\n        console.log(\"Error:\", error);\n      });\n  };\n\n  startEdit = (task) => {\n    this.setState({\n      activeItem: task,\n      editing: true,\n    });\n  };\n\n  deleteItem = (task) => {\n    var csrftoken = this.getCookie(\"csrftoken\");\n\n    fetch(`http://127.0.0.1:8000/api/task-delete/${task.id}/`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken,\n      },\n    }).then((response) => {\n      this.fetchTasks();\n    });\n  };\n\n  strikeUnstike = (task) => {\n    task.completed = !task.completed;\n    var csrftoken = this.getCookie(\"csrftoken\");\n\n    console.log(\"Task:\", task.completed);\n    fetch(`http://127.0.0.1:8000/api/task-update/ ${task.id}/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken,\n      },\n      body: JSON.stringify({ completed: task.completed, title: task.title }),\n    }).then((response) => {\n      this.fetchTasks();\n    });\n  };\n\n  render() {\n    var tasks = this.state.todoList;\n    var self = this;\n    return (\n        <div id=\"task-container\">\n          <div id=\"form-wrapper\">\n            <form onSubmit={this.handleSubmit} id=\"form\">\n              <div className=\"flex-wrapper\">\n                <div style={{ flex: 7 }}>\n                  <input\n                    onChange={this.handleChange}\n                    type=\"text\"\n                    id=\"input\"\n                    className=\"form-control\"\n                    name=\"title\"\n                    value={this.state.activeItem.title}\n                    placeholder=\"Task Todo...\"\n                    aria-describedby=\"emailHelp\"\n                  />\n                </div>\n\n                <div style={{ flex: 1 }}>\n                  <button\n                    id=\"submit\"\n                    type=\"submit\"\n                    name=\"add\"\n                    className=\"btn btn-primary\"\n                  >\n                    Submit\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n\n          <div id=\"list-wrapper\">\n            {tasks.map((task, index) => {\n              return (\n                <div\n                  style={{ flex: 7 }}\n                  key={index}\n                  className=\"task-wrapper flex-wrapper\"\n                >\n                  <div\n                    onClick={() => self.strikeUnstike(task)}\n                    style={{ flex: 7 }}\n                  >\n                    {task.completed == false ? (\n                      <span>{task.title}</span>\n                    ) : (\n                      <strike>{task.title}</strike>\n                    )}\n                  </div>\n\n                  <div style={{ flex: 1 }}>\n                    <button\n                      onClick={() => self.startEdit(task)}\n                      id=\"edit\"\n                      className=\"btn btn-sm btn-outline-info\"\n                    >\n                      Edit\n                    </button>\n                  </div>\n                  <div style={{ flex: 1 }}>\n                    <button\n                      onClick={() => self.deleteItem(task)}\n                      className=\"btn btn-sm btn-danger\"\n                    >\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}